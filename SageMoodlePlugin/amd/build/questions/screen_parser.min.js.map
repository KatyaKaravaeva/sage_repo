{"version":3,"file":"screen_parser.min.js","sources":["../../src/questions/screen_parser.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Parses the current state of the screen, extracting data such as the current answer for coderunner questions\n * and the last time a question was focused.\n *\n * @module     block_sage/questions/screen_parser\n * @copyright  2025 Vasilevskiy Vladimir <vivasilevskiy_1@edu.hse.ru>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\ndefine(['jquery', 'block_sage/api/focus_api'], function($, focus_api) {\n    /**\n     * Creates a parser for 'coderunner' type questions which extracts current answer.\n     *\n     * @returns {{getType: (function(): string), parseQuestionToJson: (function(*): {currentAnswer: *})}}\n     */\n    function getCoderunnerParser() {\n        return {\n            getType: function () {\n                return \"coderunner\";\n            },\n            parseQuestionToJson: function (question) {\n                const code = $(question).find('.ace_content').text().trim();\n                return {\n                    currentAnswer:  code,\n                };\n            }\n        };\n    }\n\n    const parsers = [getCoderunnerParser()];\n\n    /**\n     * Parses a single question element, extracting common data and type-specific data.\n     *\n     * @param {Object} question The question DOM element.\n     * @returns {Object} The parsed question data.\n     */\n    function parseQuestion(question) {\n        var parseResult = {\n            'lastTouched' : focus_api.getLastTimeFocused(question.id)\n        };\n\n        for (let j = 0; j < parsers.length; j++) {\n            const parser = parsers[j];\n            if ($(question).hasClass(parser.getType())) {\n                return {\n                    ...parseResult,\n                    ...parser.parseQuestionToJson(question)\n                };\n            }\n        }\n        return parseResult;\n    }\n\n    /**\n     * Parses all question elements on the page and returns an array of parsed question data.\n     *\n     * @returns {Array} An array of parsed question data objects.\n     */\n    function parse() {\n        const questions = $(\".que\");\n        const result = [];\n        for (let i = 0; i < questions.length; i++) {\n            const question = questions[i];\n            result.push(parseQuestion(question));\n        }\n        return result;\n    }\n\n    return {\n        parse: parse\n    };\n});"],"names":["define","$","focus_api","parsers","getType","parseQuestionToJson","question","currentAnswer","find","text","trim","parseQuestion","parseResult","getLastTimeFocused","id","j","length","parser","hasClass","parse","questions","result","i","push"],"mappings":";;;;;;;;AAuBAA,4CAAO,CAAC,SAAU,6BAA6B,SAASC,EAAGC,iBAoBjDC,QAAU,CAbL,CACHC,QAAS,iBACE,cAEXC,oBAAqB,SAAUC,gBAEpB,CACHC,cAFSN,EAAEK,UAAUE,KAAK,gBAAgBC,OAAOC,oBAgBxDC,cAAcL,cACfM,YAAc,aACEV,UAAUW,mBAAmBP,SAASQ,SAGrD,IAAIC,EAAI,EAAGA,EAAIZ,QAAQa,OAAQD,IAAK,OAC/BE,OAASd,QAAQY,MACnBd,EAAEK,UAAUY,SAASD,OAAOb,iBACrB,IACAQ,eACAK,OAAOZ,oBAAoBC,kBAInCM,kBAkBJ,CACHO,uBAVMC,UAAYnB,EAAE,QACdoB,OAAS,OACV,IAAIC,EAAI,EAAGA,EAAIF,UAAUJ,OAAQM,IAAK,OACjChB,SAAWc,UAAUE,GAC3BD,OAAOE,KAAKZ,cAAcL,kBAEvBe"}