{"version":3,"file":"chat_api.min.js","sources":["../../src/api/chat_api.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Provides an API for interacting with the chat functionality, including sending and receiving messages,\n * managing chat state, and registering listeners for chat events.\n *\n * @module     block_sage/api/chat_api\n * @copyright  2024 Vasilevskiy Vladimir <vivasilevskiy_1@edu.hse.ru>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\ndefine(['core/ajax', 'block_sage/api/selection_api', 'block_sage/questions/request_args'],\n    function(Ajax, selection_api, request_args) {\n\n    let chatOpen = false;\n    let curChatMessages = [];\n    let wasSynced = false;\n\n    let chatStateListeners = [];\n    let chatMessageListeners = [];\n\n    /**\n     * Synchronizes chat messages with the server, fetching the latest messages and updating the local chat history.\n     *\n     * @returns {void}\n     */\n    function syncMessagesFromServer() {\n        var args = request_args.getAttemptFromURL();\n        const request = Ajax.call([{\n            methodname: 'block_sage_get_chat_messages',\n            args: args,\n        }]);\n\n        request[0].done(function(response) {\n            curChatMessages = [];\n            response.messages.forEach((m)=>addMessageToChat(m));\n        }).fail(function(error) {\n            window.console.error('Error:', error);\n        });\n    }\n\n    /**\n     * Retrieves the current chat messages. If the messages haven't been synced yet,\n     * it synchronizes them from the server first.\n     *\n     * @returns {[{role: string, message: string}]} An array of chat message objects.\n     */\n    function getChatMessages() {\n        if(!wasSynced) {\n            wasSynced = true;\n            syncMessagesFromServer();\n        }\n        return curChatMessages;\n    }\n\n    /**\n     * Sends a new chat message to the server, triggers processing, and updates the chat with responses.\n     *\n     * @param {string} message The message text to be sent.\n     * @returns {void}\n     */\n    function processNewChatMessage(message) {\n        var args_msg = request_args.getAttemptFromURL();\n        var args_process = request_args.getRequestWithData();\n        if(args_msg===null || args_process===null){\n            window.console.error('Error: This page does not allow chat opening');\n            return;\n        }\n\n        const request = Ajax.call([\n            {\n                methodname: 'block_sage_add_chat_message',\n                args: {\n                    ...args_msg,\n                    context: selection_api.getCurrentSelection(),\n                    message: message,\n                },\n            },\n            {\n                methodname: 'block_sage_process_action_request',\n                args: {\n                    ...args_process,\n                    requestType: 'CHAT_ANALYZE'\n                },\n            },\n        ]);\n\n        request[0].done(function(response) {\n            addMessageToChat(response.message);\n        }).fail(function(error) {\n            window.console.error('Error while sending the message: '+error.message);\n        });\n\n        request[1].done(function(response) {\n            addMessageToChat(response.message);\n        }).fail(function(error) {\n            window.console.error('Error while processing chat: '+error.message);\n        });\n    }\n\n    /**\n     * Adds a message to the local chat history and notifies all message listeners.\n     *\n     * @param {{role: string, message: string}} message The chat message object to add.\n     * @returns {void}\n     */\n    function addMessageToChat(message) {\n        curChatMessages.push(message);\n        chatMessageListeners.forEach((listener) => listener());\n    }\n\n    /**\n     * Checks if the chat window is currently open.\n     *\n     * @returns {boolean} True if the chat is open, false otherwise.\n     */\n    function isChatOpen(){\n        return chatOpen;\n    }\n\n    /**\n     * Sets the chat window's open/closed state and notifies all state listeners.\n     *\n     * @param {boolean} open True to open the chat, false to close it.\n     * @returns {void}\n     */\n    function setChatState(open){\n        chatOpen = open;\n        chatStateListeners.forEach((listener) => listener());\n    }\n\n    /**\n     * Registers a listener function to be called when the chat state changes (opened/closed).\n     *\n     * @param {function} listener The listener function to register.\n     * @returns {void}\n     */\n    function registerChatStateListener(listener) {\n        chatStateListeners.push(listener);\n    }\n\n    /**\n     * Registers a listener function to be called when a new message is added to the chat.\n     *\n     * @param {function} listener The listener function to register.\n     * @returns {void}\n     */\n    function registerChatMessageListener(listener) {\n        chatMessageListeners.push(listener);\n    }\n\n    return {\n        syncMessagesFromServer: syncMessagesFromServer,\n\n        isChatOpen: isChatOpen,\n\n        setChatState: setChatState,\n\n        getChatMessages: getChatMessages,\n\n        addMessageToChat: addMessageToChat,\n\n        processNewChatMessage: processNewChatMessage,\n\n        registerChatMessageListener: registerChatMessageListener,\n\n        registerChatStateListener: registerChatStateListener,\n    };\n});"],"names":["define","Ajax","selection_api","request_args","chatOpen","curChatMessages","wasSynced","chatStateListeners","chatMessageListeners","syncMessagesFromServer","args","getAttemptFromURL","call","methodname","done","response","messages","forEach","m","addMessageToChat","fail","error","window","console","message","push","listener","isChatOpen","setChatState","open","getChatMessages","processNewChatMessage","args_msg","args_process","getRequestWithData","request","context","getCurrentSelection","requestType","registerChatMessageListener","registerChatStateListener"],"mappings":";;;;;;;;AAuBAA,iCAAO,CAAC,YAAa,+BAAgC,sCACjD,SAASC,KAAMC,cAAeC,kBAE1BC,UAAW,EACXC,gBAAkB,GAClBC,WAAY,EAEZC,mBAAqB,GACrBC,qBAAuB,YAOlBC,6BACDC,KAAOP,aAAaQ,oBACRV,KAAKW,KAAK,CAAC,CACvBC,WAAY,+BACZH,KAAMA,QAGF,GAAGI,MAAK,SAASC,UACrBV,gBAAkB,GAClBU,SAASC,SAASC,SAASC,GAAIC,iBAAiBD,QACjDE,MAAK,SAASC,OACbC,OAAOC,QAAQF,MAAM,SAAUA,mBAqE9BF,iBAAiBK,SACtBnB,gBAAgBoB,KAAKD,SACrBhB,qBAAqBS,SAASS,UAAaA,mBA2CxC,CACHjB,uBAAwBA,uBAExBkB,6BArCOvB,UAuCPwB,sBA9BkBC,MAClBzB,SAAWyB,KACXtB,mBAAmBU,SAASS,UAAaA,cA8BzCI,kCA9GIxB,YACAA,WAAY,EACZG,0BAEGJ,iBA4GPc,iBAAkBA,iBAElBY,+BArG2BP,aACvBQ,SAAW7B,aAAaQ,oBACxBsB,aAAe9B,aAAa+B,wBAClB,OAAXF,UAAkC,OAAfC,yBAClBX,OAAOC,QAAQF,MAAM,sDAInBc,QAAUlC,KAAKW,KAAK,CACtB,CACIC,WAAY,8BACZH,KAAM,IACCsB,SACHI,QAASlC,cAAcmC,sBACvBb,QAASA,UAGjB,CACIX,WAAY,oCACZH,KAAM,IACCuB,aACHK,YAAa,mBAKzBH,QAAQ,GAAGrB,MAAK,SAASC,UACrBI,iBAAiBJ,SAASS,YAC3BJ,MAAK,SAASC,OACbC,OAAOC,QAAQF,MAAM,oCAAoCA,MAAMG,YAGnEW,QAAQ,GAAGrB,MAAK,SAASC,UACrBI,iBAAiBJ,SAASS,YAC3BJ,MAAK,SAASC,OACbC,OAAOC,QAAQF,MAAM,gCAAgCA,MAAMG,aAoE/De,qCAjBiCb,UACjClB,qBAAqBiB,KAAKC,WAkB1Bc,mCA7B+Bd,UAC/BnB,mBAAmBkB,KAAKC"}