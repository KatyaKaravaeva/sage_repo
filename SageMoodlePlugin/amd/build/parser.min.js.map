{"version":3,"file":"parser.min.js","sources":["../src/parser.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * TODO describe module parser\n *\n * @module     block_sage/parser\n * @copyright  2025 YOUR NAME <your@email.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\ndefine(['jquery'], function($) {\n    /**\n     *\n     */\n    function getDescriptionParser() {\n        return {\n            getType: function() {\n                return \"description\";\n            },\n            parseQuestionToJson: function(question) {\n                const questionText = $(question).find('.qtext').text().trim();\n                return {\n                    type: this.getType(),\n                    text: questionText\n                };\n            }\n        };\n    }\n\n    /**\n     *\n     * @returns {{getType: (function(): string), parseQuestionToJson: (function(*): {text: *, examples: *, code: *, output: *})}}\n     */\n    function getCoderunnerParser() {\n        return {\n            getType: function () {\n                return \"coderunner\";\n            },\n            parseQuestionToJson: function (question) {\n                let questionText = '';\n                $(question).find('.formulation.clearfix').contents().each(function() {\n                    if ($(this).hasClass('for-example-para') || $(this).hasClass('prompt')) {\n                        return false;\n                    }\n                    if (this.nodeType === 3) {\n                        questionText += this.textContent.trim() + '\\n';\n                    } else if (this.nodeType === 1) {\n                        questionText += $(this).text().trim() + '\\n';\n                    }\n                });\n                questionText = questionText.trim();\n\n                const examples = $(question).find('.coderunner-examples tbody tr').map(function () {\n                    return {\n                        name: $(this).find('td:eq(0) pre').text().trim(),\n                        input: $(this).find('td:eq(1) pre').text().trim(),\n                        output: $(this).find('td:eq(2) pre').text().trim()\n                    };\n                }).get();\n\n                const code = $(question).find('.ace_content').text().trim();\n\n                const output = $(question).find('.coderunner-test-results tbody tr').map(function () {\n                    return {\n                        name: $(this).find('td:eq(1) pre').text().trim(),\n                        input: $(this).find('td:eq(2) pre').text().trim(),\n                        expected: $(this).find('td:eq(3) pre').text().trim(),\n                        got: $(this).find('td:eq(4) pre').text().trim()\n                    };\n                }).get();\n\n                return {\n                    type: this.getType(),\n                    text: questionText,\n                    examples: examples,\n                    code: code,\n                    output: output\n                };\n            }\n        };\n    }\n\n    const parsers = [getDescriptionParser(), getCoderunnerParser()];\n\n    /**\n     *\n     * @param {Object} question\n     */\n    function parseQuestion(question) {\n        for (let j = 0; j < parsers.length; j++) {\n            const parser = parsers[j];\n            if ($(question).hasClass(parser.getType())) {\n                return parser.parseQuestionToJson(question);\n            }\n        }\n    }\n\n    /**\n     *\n     */\n    function parse() {\n        const questions = $(\".que\");\n        const result = [];\n        for (let i = 0; i < questions.length; i++) {\n            const question = questions[i];\n            result.push(parseQuestion(question));\n        }\n        return result;\n    }\n\n    return {\n        init: function() {\n            setTimeout(()=> {\n                window.console.log(parse());\n            }, 1000);\n        },\n        parse: parse\n    };\n});"],"names":["define","$","parsers","getType","parseQuestionToJson","question","questionText","find","text","trim","type","this","contents","each","hasClass","nodeType","textContent","examples","map","name","input","output","get","code","expected","got","parseQuestion","j","length","parser","parse","questions","result","i","push","init","setTimeout","window","console","log"],"mappings":";;;;;;;AAsBAA,2BAAO,CAAC,WAAW,SAASC,SAwElBC,QAAU,CAnEL,CACHC,QAAS,iBACE,eAEXC,oBAAqB,SAASC,gBACpBC,aAAeL,EAAEI,UAAUE,KAAK,UAAUC,OAAOC,aAChD,CACHC,KAAMC,KAAKR,UACXK,KAAMF,gBAWX,CACHH,QAAS,iBACE,cAEXC,oBAAqB,SAAUC,cACvBC,aAAe,GACnBL,EAAEI,UAAUE,KAAK,yBAAyBK,WAAWC,MAAK,cAClDZ,EAAEU,MAAMG,SAAS,qBAAuBb,EAAEU,MAAMG,SAAS,iBAClD,EAEW,IAAlBH,KAAKI,SACLT,cAAgBK,KAAKK,YAAYP,OAAS,KACjB,IAAlBE,KAAKI,WACZT,cAAgBL,EAAEU,MAAMH,OAAOC,OAAS,SAGhDH,aAAeA,aAAaG,aAEtBQ,SAAWhB,EAAEI,UAAUE,KAAK,iCAAiCW,KAAI,iBAC5D,CACHC,KAAMlB,EAAEU,MAAMJ,KAAK,gBAAgBC,OAAOC,OAC1CW,MAAOnB,EAAEU,MAAMJ,KAAK,gBAAgBC,OAAOC,OAC3CY,OAAQpB,EAAEU,MAAMJ,KAAK,gBAAgBC,OAAOC,WAEjDa,MAEGC,KAAOtB,EAAEI,UAAUE,KAAK,gBAAgBC,OAAOC,OAE/CY,OAASpB,EAAEI,UAAUE,KAAK,qCAAqCW,KAAI,iBAC9D,CACHC,KAAMlB,EAAEU,MAAMJ,KAAK,gBAAgBC,OAAOC,OAC1CW,MAAOnB,EAAEU,MAAMJ,KAAK,gBAAgBC,OAAOC,OAC3Ce,SAAUvB,EAAEU,MAAMJ,KAAK,gBAAgBC,OAAOC,OAC9CgB,IAAKxB,EAAEU,MAAMJ,KAAK,gBAAgBC,OAAOC,WAE9Ca,YAEI,CACHZ,KAAMC,KAAKR,UACXK,KAAMF,aACNW,SAAUA,SACVM,KAAMA,KACNF,OAAQA,oBAYfK,cAAcrB,cACd,IAAIsB,EAAI,EAAGA,EAAIzB,QAAQ0B,OAAQD,IAAK,OAC/BE,OAAS3B,QAAQyB,MACnB1B,EAAEI,UAAUS,SAASe,OAAO1B,kBACrB0B,OAAOzB,oBAAoBC,oBAQrCyB,cACCC,UAAY9B,EAAE,QACd+B,OAAS,OACV,IAAIC,EAAI,EAAGA,EAAIF,UAAUH,OAAQK,IAAK,OACjC5B,SAAW0B,UAAUE,GAC3BD,OAAOE,KAAKR,cAAcrB,kBAEvB2B,aAGJ,CACHG,KAAM,WACFC,YAAW,KACPC,OAAOC,QAAQC,IAAIT,WACpB,MAEPA,MAAOA"}